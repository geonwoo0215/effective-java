### ITEM 8

## finalizer와 cleaner 사용을 피하라

Finalizer Cleaner의 단점을 확인하면서 왜 사용하면 안 되는지 알아보자


### 즉시 수행된다는 보장이 없다.
finalizer와 cleaner가 실행되기까지 얼마나 걸릴지 모른다.
사용자가 원하는 순간에 실행이 안 되기 때문에 제때 실행되어야 하는 작업은 할 수 없습니다.
시스템이 열 수 있는 파일 개수에 한계가 있어 그 파일들이 제대로 처리되지 않아 새로운 파일을 열 수 없을지도 모른다.

### finalizer는 인스턴스 회수가 지연될 수 있다.
finalizer 스레드는 다른 애플리케이션 보다 스레드의 우선순위가 낮아서 늦게 실행되거나 실행이 안 될 수 도 있다.
finalizer의 작업이 계속 처리되지 않고 싸이다 보면 OutOfMemoryError를 내게 된다.

### finalizer와 cleaner가 아예 실행되지 않을 수도 있다.
늦게 실행될 수 도 있지만 아예 실행되지 않을 수도 있다.
상태를 영구적으로 수정하는 작업에서는 절대 finalizer나 cleaner에 의존해서는 안 된다.

`System.gc`나 `System.runFinalization`는 finalizer와 cleaner가 실행될 가능성은 높여줄 수 있으나 보장하지는 않는다.
`System.runFinalizersOnExit`나 `Runtime.runFinalizersOnExit 또한 사용하지 말자

### 성능 문제도 있다.
finalizer는 가비지 컬렉터의 효율을 떨어뜨린다.
시간도 try-with-resource보다 느리다.

### finalizer를 사용한 클래스는 공격에 노출되어 심각한 보안 문제를 일으킬 수도 있다.

## 대안
자원을 종료하기 위해서 AutoCloseable을 구현해 주고 try-with-resources를 사용하거나, close메서드를 호출한다.
close 메서드는 현재 인스턴스의 상태가 종료됨을 기록하고 이미 사용이 끝난 상태에서 호출되면 IllegalStateException을 호출한다.

### finalizer와 cleaner가 사용되는 경우
첫번째로 안전망 역할이다.
자원을 다 쓰고 close 메서드를 호출하지 않는 것에 대비한 사용이다.
언제 호출될지는 모르지만, 안 하는 것보다 나으니 그렇다.

두 번째로는 네이티브 피어를 정리할 때 사용한다.

네이티브 피어는 자바 객체가 아니라 가비지 컬렉터가 존재를 모른다.
성능 저하를 감당할 수 있고 중요하지 않을 때 사용을 하고 그렇지 않다면 close 메서드를 사용하자


